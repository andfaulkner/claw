#!/usr/bin/env ruby
# encoding: utf-8
require 'fileutils'
require 'usage_info'

# HANDLE CLI ARGUMENTS
class Arguments
  attr_reader :args

  def initialize(args)
    @args = args                                             # provide args from cli
    %w(wildside before after).each {|var| define_var(var) }  # dynamically define vars
    @after = true if !@before && !@after                     # inject after is the default
  end

  def valid_input
    @args.size < 3 || (@before && @after) || @args[0..2].find_index('--help')
  end

  def method_missing(method_name, *arguments, &_block)
    instance_variable_set("@#{method_name.to_s.chop}", arguments[0]) if method_name.to_s =~ /=$/
  end

  private

    def define_var(arg)
      if (does_match = @args[0..3].find_index("--#{arg}"))
        instance_variable_set("@#{arg}", !!@args.slice!(does_match))   # remove inject before arg
      end
      self.class.class_eval("attr_reader :#{arg}")                     # define new readable var
    end
end

# inject text at matching location
module InjectAtMatch
  def self.inject(filename, pattern, new_text, options)
    bk_filename = backup_original_file filename

    newfile = create_newfile_with_injection bk_filename, pattern, new_text, options

    show_output newfile, options

    File.new(filename, 'w+').write newfile.join ''
    File.delete bk_filename if options[:wildside]
  end

  def self.backup_original_file(filename)
    bk_filename = "#{filename}__bk"
    FileUtils.mv(filename, bk_filename) # COPY ORIGINAL FILE TO BACKUP
    bk_filename
  end

  def self.create_newfile_with_injection(bk_filename, pattern, new_text, options)
    newfile = []
    File.open(bk_filename, 'r').each_line {|line|
      if options[:before]
        newfile << "#{new_text}\n" if line.match pattern
        newfile << line
      else
        newfile << line
        newfile << "#{new_text}\n" if line.match pattern
      end
    }.close
    newfile
  end

  def self.show_output(newfile, options)
    unless options[:no_output]
      puts "OUTPUT\n-------"
      puts newfile
    end
  end
end

################################## RUN IF EXECUTING AS CLI TOOL ##################################
if __FILE__ == $PROGRAM_NAME
  # prep CLI args for public InjectAtMatch::inject method
  def __inject__(arguments)
    # note: treats all text after first 2 args as replacement text
    InjectAtMatch.inject arguments.args[0], arguments.args[1], arguments.args.drop(2).join(' '),
                         before: arguments.before, wildside: arguments.wildside
  end

  arguments = Arguments.new ARGV
  if arguments.valid_input
    UsageInfo.usage # SHOW HELP
  else
    __inject__ arguments # EXTRACT ARGUMENTS
  end
##################################################################################################

##################### IMPORTED LIBRARY MESSAGE, IF NOT EXECUTING AS CLI TOOL #####################
else
  puts 'inject_at_match imported'
end
